// db.questions.insert({
//     "details": "<p>Define <var>f(0) = 1</var> and <var>f(n)</var> to be the number of different ways <var>n</var> can be expressed as a sum of integer powers of 2 using each power no more than twice.</p><p>Given an integer N, calculate <var>f(N)</var></p><div class='well-sm'>Constraints<pre>0 &le; N &le; 10<sup>25</sup></pre>Sample Input #1<pre>10</pre>Sample Output #1<pre>5</pre>Explanation<pre>The different combinations being<br>	1 + 1 + 8<br>	1 + 1 + 4 + 4<br>	1 + 1 + 2 + 2 + 4<br>	2 + 4 + 4<br>	2 + 8</pre></div>",
//     "folder": "powers-of-two",
//     "level": 1,
//     "random": Math.random(),
//     "tags": [],
//     "title": "Powers of Two"
// });

// db.questions.insert({
//     "details": "<p>You have two numbers, A and B, decomposed in binary representation, write a function that sums them and returns the result.</p><div class='well-sm'>Constraints<pre>1 &le; length(A) &le; 10<sup>25</sup></pre>Sample Input #1<pre>100100<br/>100011</pre>Sample Output #1<pre>1000111</pre></div>",
//     "folder": "binary-addition",
//     "level": 1,
//     "random": Math.random(),
//     "tags": ["binary", "easy",],
//     "title": "Addition with a twist"
// });

// db.questions.insert({
// 	"details":"<p>Write a program that prints the numbers from 1 to N. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print 'FizzBuzz'.</p><p>N will be provided vai stdin.</p><div class='well-sm'>Constraints<pre>1 &le; N &le; 100</pre>Sample Input #1<pre>3</pre>Sample Output #1<pre>1<br>2<br>Fizz</pre></div>",
// 	"folder":"fizz-buzz",
// 	"level":1,
// 	"random":Math.random(),
// 	"tags":["easy",],
// 	"title":"Fizz Buzz"
// });

// db.questions.insert({
// 	"details": "<p>A k-palindrome is a string which transforms into a palindrome on removing at most k characters.</p><p>Given a string S, and an interger K, print &quot;YES&quot; if S is a k-palindrome; otherwise print &quot;NO&quot;.<p><div class='well-sm'>Constraints<pre>1 &le; length(S) &le; 20000<br />0 &le; K &le; 30</pre>Sample Input #1<pre>abda 1</pre>Sample Output #1<pre>YES</pre>Sample Input #2<pre>abdxa 1</pre>Sample Output #2<pre>NO</pre></div>",
// 	"folder":"k-palindrome",
// 	"level":4,
// 	"random":Math.random(),
// 	"tags":["medium","string",],
// 	"title":"K-Palindrome"
// });

// db.questions.insert({
// 	"details": "<p>Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:</p><table class='table table-condensed'><tr><td>Triangle</td><td>T<sub>n</sub> = <sup>n(n+1)</sup>&frasl;<sub>2</sub></td><td>1, 3, 6, ...</td></tr><tr><td>Pentagonal</td><td>P<sub>n</sub> = <sup>n(3n-1)</sup>&frasl;<sub>2</sub></td><td>1, 5, 12, ...</td></tr><tr><td>Hexagonal</td><td>H<sub>n</sub> = n(2n-1)</td><td>1, 6, 15, ...</td></tr></table><p>Given a number N, find the next number larger than N and smaller than 10<sup>25</sup> which is trianglar, pentagonal and hexagonal. If no number exists output &quot;NO&quot;</p><div class='well-sm'>Contraints<pre>0 &le; N &le; 10<sup>25</sup></pre>Sample Input #1<pre>0</pre>Sample Output #1<pre>1</pre></div>",
// 	"folder":"triangular-pentagonal-hexagonal",
// 	"level":3,
// 	"random":Math.random(),
// 	"tags":["medium","math",],
// 	"title":"Numbers of Sorts"
// });

// db.questions.insert({
// 	"details": "<p>Given a number N, generate bit patterns from 0 to 2<sup>N-1</sup> such that successive patterns differ by one bit.</p><div class='well-sm'>Constraints<pre>2 &le; N &le; 10<sup>5</sup></pre>Sample Input #1<pre>2</pre>Sample Output #1<pre>00<br/>01<br/>11<br/>10</pre></div>",
// 	"folder":"gray-code",
// 	"level":1,
// 	"random":Math.random(),
// 	"tags":["math","easy",],
// 	"title":"Gray Code"
// });

// db.questions.insert({
// 	"details": "<p>You are given a number N, followed by an array of length N. It has both positive and negative integers. Sort this array in such a way that, the negative integers should be in the front, and the positive integers should at the back. However the relative position should not be changed.</p><div class='well-sm'>Constraints<pre>1 &le; N &le; 10<sup>25</sup> </pre>Sample Input #1<pre>5<br />-1 1 3 -2 2</pre>Sample Output #1<pre>-1 -2 1 3 2</pre></div>",
// 	"folder":"separation-of-signs",
// 	"level":3,
// 	"random":Math.random(),
// 	"tags":["sorting", "easy"],
// 	"title":"Separation of Signs"
// });

// db.questions.insert({
// 	"details": "<p>Given a number N, find the number of subsets consisting of numbers 1 - N, such that the sum of numbers in the subset is a prime number</p><div class='well-sm'>Constraints<pre>1 &le; N &le; 10<sup>10</sup></pre>Sample Input #1<pre>5</pre>Sample Output #1<pre>5</pre>Explanation<pre>The subsets being<br>	(2)<br>	(3)<br>	(5)<br>	(1, 2)<br>	(2, 5)</pre></div",
// 	"folder":"subset-of-primes",
// 	"level":4,
// 	"random":Math.random(),
// 	"tags":["math","medium","primes"],
// 	"title":"Subset of Primes"
// });

// db.questions.insert({
// 	"details": "<p>There are N pots of gold arranged in a line, each containing some gold coins. Players A and B get alternating turns in which the player can pick a pot from one of the ends of the line. To win, the player must have a higher number of coins at the end. In cases of a tie, B wins.</p><p>Given that A goes first and both play optimally, determine which player wins.</p><p>Line 1 contain N.<br/>Lines 2..N+1 have the number of coins in each pot. The pots are provided in order.</p> <div class='well-sm'>Constraints<pre>1 &le; N &le; 10<sup>10</sup></pre>Sample Input #1<pre>2<br>15<br>10</pre>Sample Output #1<pre>A</pre></div>",
// 	"folder":"pots-of-gold",
// 	"level":6,
// 	"random":Math.random(),
// 	"tags":["dynamic programming", "hard", "games"],
// 	"title":"Pots of Gold"
// });

// db.questions.insert({
// 	"details": "<p>You have N lists of sorted integers. Find the smallest range that includes at least one number from each of the N lists.</p><p>Line 1: N<br/>Lines 2...N+1: each line has the size of the list, K, followed by the K elements</p><div class='well-sm'>Constraints<pre>1 &le; N &le; 10<sup>25</sup></pre>Sample Input #1<pre>3<br>3 15 24 26<br>4 0 9 12 20<br/>4 5 8 22 30</pre>Sample Output #1<pre>20 24</pre>Explanation<pre>From each list we take:<br>	[15, 24, 26] -> 24<br>	[0, 9, 12, 20] -> 20<br>	[5, 8, 22, 30] -> 22</pre></div>",
// 	"folder":"spanning-sorted-lists",
// 	"level":6,
// 	"random":Math.random(),
// 	"tags":["arrays", "sorting", "hard"],
// 	"title":"Spanning Sorted Lists"
// });

// db.questions.insert({
// 	"details": "<p>There are N people standing in a queue. For each person you are given their height and the number of taller people in front of them in the queue.</p><p>Given this provide a possilbe queue arrangment described by the height</p><div class='q-info'>Input Format<pre>Line 1: N<br/>Lines 2...N+1: h, q<br>h - height of the person<br>q - # of taller people in front</pre>Constraints<pre>1 &le; N &le; 10<sup>20</sup></pre>Sample Input #1<pre>3<br>3 0<br>2 1<br/>1 1</pre>Sample Output #1<pre>3 1 2</pre>Explanation<pre>* 2 is behind 3* 1 is behind either 2 or 3only [3 1 2] satifies conditions</pre></div>",
// 	"folder":"heights-in-queue",
// 	"level":6,
// 	"random":Math.random(),
// 	"tags":["hard", "sorting", "arrays"],
// 	"title":"Heights in Queue"
// });

// db.questions.insert({
// 	"details": "<p>Given an array of integers. Find two disjoint contiguous sub-arrays such that the absolute difference between the sum of two sub-array is maximum. Print the difference.</p><div class='q-info'>Input Format<pre>Line 1: N<br/>Lines 2: an array of N integers</pre>Constraints<pre>1 &le; N &le; 10<sup>25</sup></pre>Sample Input #1<pre>7<br>2 -1 -2 1 -4 2 8</pre>Sample Output #1<pre>16</pre>Explanation<pre>The two sub arrays are<br>[-1 -2 1 -4]<br>[2 8]</pre></div>",
// 	"folder":"difference-of-sub-array",
// 	"level":5,
// 	"random":Math.random(),
// 	"tags":["medium", "arrays"],
// 	"title":"Separation of Arrays"
// });

// db.questions.insert({
// 	"details": "<p>Given a sorted array of length N and a value X, find two values in the array whos sum is X. If it is not possible print &quot;NO&quot;</p><div class='q-info'>Input Format<pre>Line 1: X<br/>Line 2: N, followed by N integers</pre>Constraints<pre>1 &le; N &le; 10<sup>25</sup></pre>Sample Input #1<pre>-4<br>7 -4 -2 -1 0 1 2 8</pre>Sample Output #1<pre>-4 8</pre></div>",
// 	"folder":"sums-in-arrays",
// 	"level":3,
// 	"random":Math.random(),
// 	"tags":["arrays","easy"],
// 	"title":"Sums in Arrays"
// });

// db.questions.insert({
// 	"details": "<p>An aggregate number is a number such that the digits in the number can divided into several parts, and the later part is the sum of the former parts.</p><p>Given a number N, output &quot;YES&quot; if it is an aggregate number &quot;NO&quot; otherwise</p><div class='q-info'>Input Format<pre>Line 1: N</pre>Constraints<pre>1 &le; N &le; 10<sup>7</sup></pre>Sample Input #1<pre>112358</pre>Sample Output #1<pre>YES</pre>Explanation<pre>1+1=2<br>1+2=3<br>2+3=5<br>3+5=8</pre>Sample Input #2<pre>1299111210</pre>Sample Output #2<pre>YES</pre>Explanation<pre>12+99=111<br>99+111=210</pre>Sample Input #3<pre>112112224</pre>Sample Output #3<pre>YES</pre>Explanation<pre>112+112=224</pre></div>",
// 	"folder":"aggregate-numbers",
// 	"level":5,
// 	"random":Math.random(),
// 	"tags":["math","medium"],
// 	"title":"Aggregate Numbers"
// });

// db.questions.insert({
// 	"details": "<p>Given an array of N words sorted lexographically, provide the alphabetic ordering used.</p><p>For some letters it will not be possible to obtain any information on their position in the alphabet, in that case, skip them in your output</p><p>If the array contains inconsistencies you should output a &quot;NO&quot;</p><div class='q-info'>Input Format<pre>Line 1: N<br>Lines 2...N+1: each lines contains a word</pre>Constraints<pre>1 &le; N &le; 10<sup>25</sup></pre>Sample Input #1<pre>2<br>x156@<br/>x1$#2z</pre>Sample Output #1<pre>5 $</pre>Explanation<pre>x1 is the longest common substring<br>5 appears before $ meaning it must be smaller</pre>Sample Input #2<pre>5<br>jhdsgf<br>19846<br>19846adlk<br>oi10123<br>oij(*#@&amp;$</pre>Sample Output #2<pre>NO</pre>Explanation<pre>From jhdsgf and 19846, j &lt; 1<br>From oi10123 and oij(*#@&amp;$, 1 &lt; j</pre></div>",
// 	"folder":"alphabet-soup",
// 	"level":6,
// 	"random":Math.random(),
// 	"tags":["graph","hard"],
// 	"title":"Alphabet Soup"
// });
